name: Publish @agape/temporal

on:
  push:
    tags:
      - 'temporal-v*'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout monorepo (AgapeToolkit)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false  # we’ll init manually with HTTPS

      - name: Patch .gitmodules to use HTTPS
        run: |
          # Replace all `git@github.com:` with HTTPS including the token
          sed -i "s|git@github.com:|https://${{ secrets.GH_PAT_WRITEABLE }}@github.com/|g" .gitmodules
          cat .gitmodules  # Optional: debug output

      - name: Init and update submodules with HTTPS
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org/'

      - name: Extract version from tag
        id: extract
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#temporal-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "raw_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Verify version matches tag
        run: |
         VERSION_TAG=${{ steps.extract.outputs.version }}
         VERSION_PKG=$(node -p "require('./libs/temporal/package.json').version")
         echo "Tag version: $VERSION_TAG"
         echo "Package version: $VERSION_PKG"
         if [ "$VERSION_TAG" != "$VERSION_PKG" ]; then
           echo "❌ Version mismatch"
           exit 1
         fi

      - name: Install dependencies
        run: npm ci

      - name: Build @agape/temporal
        run: npm run build:temporal

      - name: Publish to npm
        run: npm publish --access public
        working-directory: ./dist/libs/temporal
        env:
         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Tag and push child repo
        run: |
          cd libs/temporal
          git config user.name "Agape CI"
          git config user.email "ci@agape.dev"
          git remote set-url origin https://${{ secrets.GH_PAT_WRITEABLE }}@github.com/AgapeToolkit/agape-temporal.git
          git tag -a v${{ steps.extract.outputs.version }} -m "Release v${{ steps.extract.outputs.version }}"
          git push origin v${{ steps.extract.outputs.version }}

      # Create release assets using existing package script
      - name: Create release assets
        id: package
        run: |
          # Run the existing package script to create the tarball
          npm run package:temporal

          # Get the generated package filename
          PACKAGE_FILE=$(ls dist/packages/agape-temporal-*.tgz | head -1)
          PACKAGE_NAME=$(basename "$PACKAGE_FILE")

          echo "package_asset=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package_path=dist/packages/$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Create additional assets
          mkdir -p artifacts

          # Copy the npm package to artifacts
          cp "$PACKAGE_FILE" artifacts/

          # Create source archive
          tar -czf artifacts/agape-temporal-v${{ steps.extract.outputs.version }}-source.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=coverage \
            --exclude=.nyc_output \
            -C libs/temporal .

          # Create documentation archive
          mkdir -p docs-temp
          cp libs/temporal/README.md docs-temp/
          cp libs/temporal/LICENSE docs-temp/
          cp libs/temporal/package.json docs-temp/

          # Add version info
          echo "{ \"version\": \"v${{ steps.extract.outputs.version }}\", \"name\": \"@agape/temporal\", \"description\": \"Typed, dependency-free access to Temporal with fallback stub\" }" > docs-temp/version.json

          tar -czf artifacts/agape-temporal-v${{ steps.extract.outputs.version }}-docs.tar.gz -C docs-temp .

          # Create checksums
          cd artifacts
          sha256sum *.tar.gz *.tgz > checksums.txt

          echo "source_asset=agape-temporal-v${{ steps.extract.outputs.version }}-source.tar.gz" >> $GITHUB_OUTPUT
          echo "docs_asset=agape-temporal-v${{ steps.extract.outputs.version }}-docs.tar.gz" >> $GITHUB_OUTPUT
          echo "checksums_asset=checksums.txt" >> $GITHUB_OUTPUT

      - name: Ensure gh CLI is authenticated
        run: echo "${{ secrets.GH_PAT_WRITEABLE }}" | gh auth login --with-token

      - name: Create or update release
        run: |
          TAG="${{ steps.extract.outputs.raw_tag }}"
          VERSION="${{ steps.extract.outputs.version }}"

          echo "🔹 Creating/updating release: $TAG"

          # Check if release exists and delete it
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists, deleting..."
            gh release delete "$TAG" -y
          fi

          # Create new release with assets
          gh release create "$TAG" \
            --target "$GITHUB_SHA" \
            --title "@agape/temporal v$VERSION" \
            --notes "Release v$VERSION" \
            "artifacts/${{ steps.package.outputs.package_asset }}" \
            "artifacts/${{ steps.package.outputs.source_asset }}" \
            "artifacts/${{ steps.package.outputs.docs_asset }}" \
            "artifacts/${{ steps.package.outputs.checksums_asset }}"
